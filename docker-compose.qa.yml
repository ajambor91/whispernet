services:
  loki:
    build:
      context: './MonitoringLoki'
      dockerfile: 'Dockerfile.qa'
    container_name: loki
    volumes:
      - loki:/data
    hostname: loki
    networks:
      - whispernet
  grafana:
    build:
      context: './MonitoringGrafana'
      dockerfile: './Dockerfile.qa'
    hostname: grafana
    container_name: grafana
    volumes:
      - grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - loki
    networks:
      - whispernet
  promtail:
    build:
      context: 'MonitoringPromtail'
      dockerfile: 'Dockerfile.qa'
    hostname: promtail
    container_name: promtail
    volumes:
      - kafka-log:/var/log/external/kafka:ro
      - nginx-log:/var/log/external/nginx:ro
    networks:
      - whispernet
    depends_on:
      - loki
  user-session:
    build:
      context: 'UserSession'
      dockerfile: 'Dockerfile.qa'
    networks:
      - whispernet
    hostname: user-session
    container_name: user-session
    depends_on:
      - broker
      - gateway
      - loki
  session:
    build:
      context: 'Session'
      dockerfile: './Dockerfile.qa'
    networks:
      - whispernet
    hostname: session
    container_name: session
    depends_on:
      - broker
      - user-session
      - loki
  session-cache:
    build:
      context: './SessionCache'
      dockerfile: './Dockerfile.qa'
    restart: always
    volumes:
      - session-cache:/data
    networks:
      - whispernet
  security:
    build:
      context: 'Security'
      dockerfile: './Dockerfile.qa'
    networks:
      - whispernet-security
    hostname: security
    container_name: security
    depends_on:
      - broker
      - loki
      - security-cache
      - security-db
  security-db:
    build:
      context: './SecurityDatabase'
      dockerfile: './Dockerfile.qa'
    hostname: security-db
    container_name: security-db
    networks:
      - whispernet-security
    volumes:
      - security-db:/var/lib/mysql'
  security-cache:
    build:
      context: './SecurityCache'
      dockerfile: './Dockerfile.qa'
    restart: always
    command: redis-server --loglevel warning
    volumes:
      - security-cache:/data
    networks:
      - whispernet-security
  ws-signal-server:
    depends_on:
      - broker
      - session
    build:
      context: './WebSocketSignalServer'
      dockerfile: './Dockerfile.qa'
    networks:
      - whispernet
  ws-approving-server:
    depends_on:
      - broker
      - session
    build:
      context: './WebSocketApprovingServer'
      dockerfile: './Dockerfile.qa'
    container_name: ws-approving
    hostname: ws-approving
    networks:
      - whispernet
  frontend:
    build:
      context: './ui'
      dockerfile: './web/Dockerfile.qa'
    networks:
      - whispernet-ui
    hostname: frontend
    container_name: frontend
  gateway:
    build:
      context: './Gateway'
      dockerfile: './Dockerfile.qa'
    ports:
      - '8099:80'
      - '8098:443'
    networks:
      - whispernet
      - whispernet-ui
      - whispernet-security
    hostname: gateway
    container_name: gateway
    volumes:
      - nginx-log:/var/log/nginx
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    networks:
      - whispernet
    hostname: zookeeper
  broker:
    depends_on:
      - zookeeper
    build:
      context: './Broker'
      dockerfile: './Dockerfile.qa'
    container_name: broker
    volumes:
      - kafka-log:/var/log/kafka:z
    networks:
      - whispernet-security
      - whispernet
    hostname: broker
  gateway-cms:
    build:
      context: './CmsGateway'
      dockerfile: './Dockerfile.qa'
    ports:
      - '9099:80'
      - '9098:443'
    networks:
      - whispernet-cms
    hostname: gateway-cms
    container_name: gateway-cms
  cms:
    build:
      context: './Cms'
      dockerfile: './Dockerfile.qa'
    hostname: cms
    container_name: cms
    networks:
      - whispernet-cms
  cms-db:
    build:
      context: './CmsDatabase'
      dockerfile: './Dockerfile.qa'
    hostname: cms-db
    container_name: cms-db
    networks:
      - whispernet-cms
    volumes:
      -  cms-db:/var/lib/mysql
  cms-ui:
    build:
      context: './ui'
      dockerfile: './cms-ui/Dockerfile.qa'
    networks:
      - whispernet-cms
    hostname: cms-ui
    container_name: cms-ui
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    hostname: portainer
    restart: always
    networks:
      - whispernet-admin
    ports:
      - "9000:9000"
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - portainer-data:/data
networks:
  whispernet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
  whispernet-cms:
    driver: bridge
    ipam:
      config:
        - subnet: 173.19.0.0/28
  whispernet-security:
    driver: bridge
    ipam:
      config:
        - subnet: 174.19.0.0/28
  whispernet-ui:
    driver: bridge
    ipam:
      config:
        - subnet: 175.19.0.0/16
  whispernet-admin:
    driver: bridge
    ipam:
      config:
        - subnet: 176.19.0.0/16
volumes:

  session-cache:
    driver: local
  kafka:
    driver: local
  portainer-data:
    driver: local
  kafka-log:
    driver: local
  nginx-log:
    driver: local
  grafana:
    driver: local
  security-db:
    driver: local
  security-cache:
    driver: local
  cms-db:
    driver: local
  loki:
    driver: local